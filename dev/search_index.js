var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MCMCStreamTempering","category":"page"},{"location":"#MCMCStreamTempering","page":"Home","title":"MCMCStreamTempering","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MCMCStreamTempering.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MCMCStreamTempering]","category":"page"},{"location":"#MCMCStreamTempering.NamedNTupleOrComponentVector","page":"Home","title":"MCMCStreamTempering.NamedNTupleOrComponentVector","text":"NamedNTupleOrComponentVector{T}\n\nShorthand for Union of NamedNTuple{T} or ComponentVector{T} of eltype(T).\n\n\n\n\n\n","category":"type"},{"location":"#MCMCStreamTempering.MHLogDensityFunction","page":"Home","title":"MCMCStreamTempering.MHLogDensityFunction","text":"MHLogDensityFunction\n\nA log density function for the MHSampler sampler.\n\nThis variant uses the  set_namedtuple! function to update the VarInfo.\n\n\n\n\n\n","category":"type"},{"location":"#MCMCStreamTempering.NamedNTuple","page":"Home","title":"MCMCStreamTempering.NamedNTuple","text":"NamedNTuple{T}\n\nShorthand for NamedTuple with Tuple type being an NTuple with eltype T`.\n\n\n\n\n\n","category":"type"},{"location":"#MCMCStreamTempering.StreamTemperingContext","page":"Home","title":"MCMCStreamTempering.StreamTemperingContext","text":"Context that multiplies each log-prior by mod used to test whether varwise_logpriors respects child-context.\n\n\n\n\n\n","category":"type"},{"location":"#MCMCStreamTempering.TestLogModifyingChildContext","page":"Home","title":"MCMCStreamTempering.TestLogModifyingChildContext","text":"Context that multiplies each log-prior by mod used to test whether varwise_logpriors respects child-context.\n\n\n\n\n\n","category":"type"},{"location":"#MCMCStreamTempering.compute_T_streams-Tuple{NamedTuple{S, Tuple{Vararg{false, N}}} where {S, N}, Any}","page":"Home","title":"MCMCStreamTempering.compute_T_streams","text":"Compute temperature of data streams for given ratio of r = model_discrepancy / stddev(obs_error).\n\n\n\n\n\n","category":"method"},{"location":"#MCMCStreamTempering.dist_val_tuple-Tuple{DynamicPPL.Sampler{<:MCMCStreamTempering.MHSampler}, Union{DynamicPPL.ThreadSafeVarInfo{<:DynamicPPL.VarInfo{Tmeta}}, DynamicPPL.VarInfo{Tmeta}} where Tmeta}","page":"Home","title":"MCMCStreamTempering.dist_val_tuple","text":"dist_val_tuple(spl::Sampler{<:MHSampler}, vi::VarInfo)\n\nReturn two NamedTuples.\n\nThe first NamedTuple has symbols as keys and distributions as values. The second NamedTuple has model symbols as keys and their stored values as values.\n\n\n\n\n\n","category":"method"},{"location":"#MCMCStreamTempering.estimate_obs_unc-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}}","page":"Home","title":"MCMCStreamTempering.estimate_obs_unc","text":"estimate_obs_unc(x,y; span=0.8)\n\nEstimate std-deviation of observation error in a series by inspecting the residuals of a loess model y ~ x. Keyword argument span controls the smoothmess of the fit. A value of 1 corresponds to a straight line, 0.8 is adequate for a single maximum. The fit can be inspected by plotting pred ~ x in the same plot as y ~ x.\n\nReturn value is a NamedTuple\n\nstd_obsunc: estimated standard deviation of observation uncertainty\nSS_obsunc: sum of squared residuals of observation uncertainty\npred: predictions by the loess model, useful to inspect smoothness.\n\n\n\n\n\n","category":"method"},{"location":"#MCMCStreamTempering.estimate_prop_weights_model_unc-Tuple{Any, Any}","page":"Home","title":"MCMCStreamTempering.estimate_prop_weights_model_unc","text":"estimate_prop_weights_model_unc(obs_streams, std_eff_streams)\n\nEstimate ratio of spread / stddev(obs_error), where spread is the 95% interval of observed value. \n\nThis is helpful for allowing larger relative model discrepancy (per observation uncertainty) for the streams with a larger spread per observation uncertainty.\n\nArguments\n\nobs_streams: ComponentVector or NamedTuple stream -> observations\nstd_eff_streams: ComponentVector or NamedTuple stream -> std_dev(obs_error)\n\nResult NamedTuple with ComponentVectors\n\nw: multiplicators of allowed model discrepancy. Specifically w0 ./ minimum(w0)\nw0: original ratios spread / stddev(obs_error)\n\n\n\n\n\n","category":"method"},{"location":"#MCMCStreamTempering.set_namedtuple!-Tuple{Union{DynamicPPL.ThreadSafeVarInfo{<:DynamicPPL.VarInfo{Tmeta}}, DynamicPPL.VarInfo{Tmeta}} where Tmeta, NamedTuple}","page":"Home","title":"MCMCStreamTempering.set_namedtuple!","text":"set_namedtuple!(vi::VarInfo, nt::NamedTuple)\n\nPlaces the values of a NamedTuple into the relevant places of a VarInfo.\n\n\n\n\n\n","category":"method"}]
}
